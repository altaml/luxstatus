name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller psutil pywin32
        
    - name: Build Windows executable
      run: |
        python deploy_windows.py
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-build
        path: |
          dist/MicrophoneStatusMonitor.exe
          install_windows.bat
          uninstall_windows.bat
          installer.iss

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install -r requirements.txt
        pip3 install py2app pyobjc psutil
        
    - name: Build macOS app
      run: |
        python3 deploy_macos.py
        
    - name: Create DMG
      run: |
        # Create DMG creation script if it doesn't exist
        if [ ! -f create_dmg.sh ]; then
          echo '#!/bin/bash' > create_dmg.sh
          echo 'hdiutil create -format UDZO -srcfolder dist -o MicrophoneStatusMonitor.dmg' >> create_dmg.sh
          chmod +x create_dmg.sh
        fi
        ./create_dmg.sh || echo "DMG creation failed, continuing with app bundle"
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: macos-build
        path: |
          dist/Microphone Status Monitor.app
          MicrophoneStatusMonitor.dmg
          install_macos.sh
          uninstall_macos.sh

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Download Windows artifacts
      uses: actions/download-artifact@v3
      with:
        name: windows-build
        path: windows/
        
    - name: Download macOS artifacts
      uses: actions/download-artifact@v3
      with:
        name: macos-build
        path: macos/
        
    - name: Create ZIP archives
      run: |
        cd windows && zip -r ../MicrophoneStatusMonitor-Windows.zip . && cd ..
        cd macos && zip -r ../MicrophoneStatusMonitor-macOS.zip . && cd ..
        
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: |
          MicrophoneStatusMonitor-Windows.zip
          MicrophoneStatusMonitor-macOS.zip
          windows/MicrophoneStatusMonitor.exe
          macos/MicrophoneStatusMonitor.dmg
        body: |
          ## ðŸŽ¤ Microphone Status Monitor - Release ${{ github.ref_name }}
          
          ### ðŸ“¥ Downloads
          
          #### Windows
          - **Executable**: `MicrophoneStatusMonitor.exe` - Direct executable
          - **Full Package**: `MicrophoneStatusMonitor-Windows.zip` - Includes installer scripts
          
          #### macOS
          - **DMG Installer**: `MicrophoneStatusMonitor.dmg` - Recommended
          - **Full Package**: `MicrophoneStatusMonitor-macOS.zip` - Includes app bundle and scripts
          
          ### ðŸ“‹ Installation
          
          **Windows**: Download and run `MicrophoneStatusMonitor.exe` or extract the ZIP and run `install_windows.bat` as Administrator
          
          **macOS**: Download and open `MicrophoneStatusMonitor.dmg`, drag to Applications folder
          
          ### ðŸ”„ Changes
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        prerelease: false
